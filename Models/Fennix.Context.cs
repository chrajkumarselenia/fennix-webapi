//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace fenn.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class fennix360_pdnEntities2 : DbContext
    {
        public fennix360_pdnEntities2()
            : base("name=fennix360_pdnEntities2")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 300;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AlertsByTicket> AlertsByTickets { get; set; }
        public virtual DbSet<CarrierByCountry> CarrierByCountries { get; set; }
        public virtual DbSet<Carrier> Carriers { get; set; }
        public virtual DbSet<Center> Centers { get; set; }
        public virtual DbSet<Connection> Connections { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceType> DeviceTypes { get; set; }
        public virtual DbSet<DeviceUs> DeviceUses { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<NotificationType> NotificationTypes { get; set; }
        public virtual DbSet<Parameter> Parameters { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<PersonsByGroup> PersonsByGroups { get; set; }
        public virtual DbSet<PointsByRestrictedArea> PointsByRestrictedAreas { get; set; }
        public virtual DbSet<RecordType> RecordTypes { get; set; }
        public virtual DbSet<ResponsesByTicket> ResponsesByTickets { get; set; }
        public virtual DbSet<RestrictedArea> RestrictedAreas { get; set; }
        public virtual DbSet<RestrictedPerson> RestrictedPersons { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<SessionUs> SessionUses { get; set; }
        public virtual DbSet<SimCard> SimCards { get; set; }
        public virtual DbSet<SimCardUs> SimCardUses { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TicketState> TicketStates { get; set; }
        public virtual DbSet<Token> Tokens { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersByGroup> UsersByGroups { get; set; }
        public virtual DbSet<sample> samples { get; set; }
    
        public virtual int f_spCustomTicket(string operation, Nullable<byte> groupById, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, Nullable<System.DateTime> dateReference)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var groupByIdParameter = groupById.HasValue ?
                new ObjectParameter("GroupById", groupById) :
                new ObjectParameter("GroupById", typeof(byte));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var dateReferenceParameter = dateReference.HasValue ?
                new ObjectParameter("DateReference", dateReference) :
                new ObjectParameter("DateReference", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_spCustomTicket", operationParameter, groupByIdParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, dateReferenceParameter);
        }
    
        public virtual ObjectResult<spAlertsByTicket_Result> spAlertsByTicket(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> ticketId, Nullable<byte> alertId, string data)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(long));
    
            var alertIdParameter = alertId.HasValue ?
                new ObjectParameter("AlertId", alertId) :
                new ObjectParameter("AlertId", typeof(byte));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAlertsByTicket_Result>("spAlertsByTicket", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, ticketIdParameter, alertIdParameter, dataParameter);
        }
    
        public virtual ObjectResult<spCarrierByCountries_Result> spCarrierByCountries(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<int> carrierId, Nullable<int> countryId, string aPN)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var carrierIdParameter = carrierId.HasValue ?
                new ObjectParameter("CarrierId", carrierId) :
                new ObjectParameter("CarrierId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var aPNParameter = aPN != null ?
                new ObjectParameter("APN", aPN) :
                new ObjectParameter("APN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCarrierByCountries_Result>("spCarrierByCountries", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, carrierIdParameter, countryIdParameter, aPNParameter);
        }
    
        public virtual ObjectResult<spCarriers_Result> spCarriers(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, string name, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCarriers_Result>("spCarriers", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, nameParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spCenters_Result> spCenters(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<int> countryId, string name, string address, string phone, string postalCode, Nullable<byte> levelId, Nullable<int> level2Id, Nullable<int> level3Id, Nullable<int> level4Id, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(byte));
    
            var level2IdParameter = level2Id.HasValue ?
                new ObjectParameter("Level2Id", level2Id) :
                new ObjectParameter("Level2Id", typeof(int));
    
            var level3IdParameter = level3Id.HasValue ?
                new ObjectParameter("Level3Id", level3Id) :
                new ObjectParameter("Level3Id", typeof(int));
    
            var level4IdParameter = level4Id.HasValue ?
                new ObjectParameter("Level4Id", level4Id) :
                new ObjectParameter("Level4Id", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCenters_Result>("spCenters", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, countryIdParameter, nameParameter, addressParameter, phoneParameter, postalCodeParameter, levelIdParameter, level2IdParameter, level3IdParameter, level4IdParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spConnections_Result> spConnections(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> personId, Nullable<long> deviceId, string sessionCode, string hostAddress, string firmwareVersion, Nullable<System.DateTime> started, Nullable<System.DateTime> finished)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(long));
    
            var sessionCodeParameter = sessionCode != null ?
                new ObjectParameter("SessionCode", sessionCode) :
                new ObjectParameter("SessionCode", typeof(string));
    
            var hostAddressParameter = hostAddress != null ?
                new ObjectParameter("HostAddress", hostAddress) :
                new ObjectParameter("HostAddress", typeof(string));
    
            var firmwareVersionParameter = firmwareVersion != null ?
                new ObjectParameter("FirmwareVersion", firmwareVersion) :
                new ObjectParameter("FirmwareVersion", typeof(string));
    
            var startedParameter = started.HasValue ?
                new ObjectParameter("Started", started) :
                new ObjectParameter("Started", typeof(System.DateTime));
    
            var finishedParameter = finished.HasValue ?
                new ObjectParameter("Finished", finished) :
                new ObjectParameter("Finished", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConnections_Result>("spConnections", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, personIdParameter, deviceIdParameter, sessionCodeParameter, hostAddressParameter, firmwareVersionParameter, startedParameter, finishedParameter);
        }
    
        public virtual ObjectResult<spCountries_Result> spCountries(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, string name, string iSOCode, string phoneCode, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iSOCodeParameter = iSOCode != null ?
                new ObjectParameter("ISOCode", iSOCode) :
                new ObjectParameter("ISOCode", typeof(string));
    
            var phoneCodeParameter = phoneCode != null ?
                new ObjectParameter("PhoneCode", phoneCode) :
                new ObjectParameter("PhoneCode", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCountries_Result>("spCountries", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, nameParameter, iSOCodeParameter, phoneCodeParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spCustomers_Result> spCustomers(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, string name, string logo, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCustomers_Result>("spCustomers", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, nameParameter, logoParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spDevices_Result> spDevices(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<int> centerId, Nullable<long> simCardId, Nullable<long> personId, Nullable<int> deviceTypeId, string iMEI, string firmwareVersion, Nullable<bool> active, Nullable<bool> online, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            var simCardIdParameter = simCardId.HasValue ?
                new ObjectParameter("SimCardId", simCardId) :
                new ObjectParameter("SimCardId", typeof(long));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            var deviceTypeIdParameter = deviceTypeId.HasValue ?
                new ObjectParameter("DeviceTypeId", deviceTypeId) :
                new ObjectParameter("DeviceTypeId", typeof(int));
    
            var iMEIParameter = iMEI != null ?
                new ObjectParameter("IMEI", iMEI) :
                new ObjectParameter("IMEI", typeof(string));
    
            var firmwareVersionParameter = firmwareVersion != null ?
                new ObjectParameter("FirmwareVersion", firmwareVersion) :
                new ObjectParameter("FirmwareVersion", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var onlineParameter = online.HasValue ?
                new ObjectParameter("Online", online) :
                new ObjectParameter("Online", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDevices_Result>("spDevices", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, centerIdParameter, simCardIdParameter, personIdParameter, deviceTypeIdParameter, iMEIParameter, firmwareVersionParameter, activeParameter, onlineParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spDeviceTypes_Result> spDeviceTypes(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, string name, Nullable<int> minSpeed, Nullable<int> maxHdop, Nullable<int> minGpsLevel, Nullable<decimal> minDifferenceTrackPoints, Nullable<int> timeout, Nullable<int> stationaryTimeout, string icon, string mapIcon, string tailColor, Nullable<int> tailPoints, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var minSpeedParameter = minSpeed.HasValue ?
                new ObjectParameter("MinSpeed", minSpeed) :
                new ObjectParameter("MinSpeed", typeof(int));
    
            var maxHdopParameter = maxHdop.HasValue ?
                new ObjectParameter("MaxHdop", maxHdop) :
                new ObjectParameter("MaxHdop", typeof(int));
    
            var minGpsLevelParameter = minGpsLevel.HasValue ?
                new ObjectParameter("MinGpsLevel", minGpsLevel) :
                new ObjectParameter("MinGpsLevel", typeof(int));
    
            var minDifferenceTrackPointsParameter = minDifferenceTrackPoints.HasValue ?
                new ObjectParameter("MinDifferenceTrackPoints", minDifferenceTrackPoints) :
                new ObjectParameter("MinDifferenceTrackPoints", typeof(decimal));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("Timeout", timeout) :
                new ObjectParameter("Timeout", typeof(int));
    
            var stationaryTimeoutParameter = stationaryTimeout.HasValue ?
                new ObjectParameter("StationaryTimeout", stationaryTimeout) :
                new ObjectParameter("StationaryTimeout", typeof(int));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(string));
    
            var mapIconParameter = mapIcon != null ?
                new ObjectParameter("MapIcon", mapIcon) :
                new ObjectParameter("MapIcon", typeof(string));
    
            var tailColorParameter = tailColor != null ?
                new ObjectParameter("TailColor", tailColor) :
                new ObjectParameter("TailColor", typeof(string));
    
            var tailPointsParameter = tailPoints.HasValue ?
                new ObjectParameter("TailPoints", tailPoints) :
                new ObjectParameter("TailPoints", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDeviceTypes_Result>("spDeviceTypes", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, nameParameter, minSpeedParameter, maxHdopParameter, minGpsLevelParameter, minDifferenceTrackPointsParameter, timeoutParameter, stationaryTimeoutParameter, iconParameter, mapIconParameter, tailColorParameter, tailPointsParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spDeviceUses_Result> spDeviceUses(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> personId, Nullable<long> deviceId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDeviceUses_Result>("spDeviceUses", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, personIdParameter, deviceIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGroups_Result> spGroups(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<int> centerId, string name, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGroups_Result>("spGroups", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, centerIdParameter, nameParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spLanguages_Result> spLanguages(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, string name, string iSOCode, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iSOCodeParameter = iSOCode != null ?
                new ObjectParameter("ISOCode", iSOCode) :
                new ObjectParameter("ISOCode", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLanguages_Result>("spLanguages", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, nameParameter, iSOCodeParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spLocations_Result> spLocations(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> personId, Nullable<long> deviceId, string connectingSession, string serialNumber, Nullable<System.DateTime> deviceDate, Nullable<System.DateTime> serverDate, Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<decimal> speed, Nullable<int> course, Nullable<int> moveDistance, string gPSstatus, Nullable<byte> satellitesNumber, Nullable<byte> gPSFixedStatus, Nullable<int> hDOP, string mCC, string lAC, string cellID, string alarmStatus, Nullable<decimal> batteryVoltage, Nullable<int> batteryPercentage, Nullable<byte> gSMSignal, Nullable<bool> beltStatus, Nullable<bool> shellStatus, Nullable<int> chargeStatus, Nullable<bool> lowPowerStatus, Nullable<bool> dataLoggerStatus, Nullable<bool> stillStatus, Nullable<bool> enableAlarmsStatus, Nullable<bool> buzzerStatus, Nullable<bool> vibratorStatus, Nullable<bool> rFConnectionStatus, Nullable<bool> rFGsensorStatus, Nullable<bool> rFPlugStatus, Nullable<bool> restrictedAreasStatus, Nullable<bool> restrictedPersonsStatus)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(long));
    
            var connectingSessionParameter = connectingSession != null ?
                new ObjectParameter("ConnectingSession", connectingSession) :
                new ObjectParameter("ConnectingSession", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var deviceDateParameter = deviceDate.HasValue ?
                new ObjectParameter("DeviceDate", deviceDate) :
                new ObjectParameter("DeviceDate", typeof(System.DateTime));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(decimal));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(int));
    
            var moveDistanceParameter = moveDistance.HasValue ?
                new ObjectParameter("MoveDistance", moveDistance) :
                new ObjectParameter("MoveDistance", typeof(int));
    
            var gPSstatusParameter = gPSstatus != null ?
                new ObjectParameter("GPSstatus", gPSstatus) :
                new ObjectParameter("GPSstatus", typeof(string));
    
            var satellitesNumberParameter = satellitesNumber.HasValue ?
                new ObjectParameter("SatellitesNumber", satellitesNumber) :
                new ObjectParameter("SatellitesNumber", typeof(byte));
    
            var gPSFixedStatusParameter = gPSFixedStatus.HasValue ?
                new ObjectParameter("GPSFixedStatus", gPSFixedStatus) :
                new ObjectParameter("GPSFixedStatus", typeof(byte));
    
            var hDOPParameter = hDOP.HasValue ?
                new ObjectParameter("HDOP", hDOP) :
                new ObjectParameter("HDOP", typeof(int));
    
            var mCCParameter = mCC != null ?
                new ObjectParameter("MCC", mCC) :
                new ObjectParameter("MCC", typeof(string));
    
            var lACParameter = lAC != null ?
                new ObjectParameter("LAC", lAC) :
                new ObjectParameter("LAC", typeof(string));
    
            var cellIDParameter = cellID != null ?
                new ObjectParameter("CellID", cellID) :
                new ObjectParameter("CellID", typeof(string));
    
            var alarmStatusParameter = alarmStatus != null ?
                new ObjectParameter("AlarmStatus", alarmStatus) :
                new ObjectParameter("AlarmStatus", typeof(string));
    
            var batteryVoltageParameter = batteryVoltage.HasValue ?
                new ObjectParameter("BatteryVoltage", batteryVoltage) :
                new ObjectParameter("BatteryVoltage", typeof(decimal));
    
            var batteryPercentageParameter = batteryPercentage.HasValue ?
                new ObjectParameter("BatteryPercentage", batteryPercentage) :
                new ObjectParameter("BatteryPercentage", typeof(int));
    
            var gSMSignalParameter = gSMSignal.HasValue ?
                new ObjectParameter("GSMSignal", gSMSignal) :
                new ObjectParameter("GSMSignal", typeof(byte));
    
            var beltStatusParameter = beltStatus.HasValue ?
                new ObjectParameter("BeltStatus", beltStatus) :
                new ObjectParameter("BeltStatus", typeof(bool));
    
            var shellStatusParameter = shellStatus.HasValue ?
                new ObjectParameter("ShellStatus", shellStatus) :
                new ObjectParameter("ShellStatus", typeof(bool));
    
            var chargeStatusParameter = chargeStatus.HasValue ?
                new ObjectParameter("ChargeStatus", chargeStatus) :
                new ObjectParameter("ChargeStatus", typeof(int));
    
            var lowPowerStatusParameter = lowPowerStatus.HasValue ?
                new ObjectParameter("LowPowerStatus", lowPowerStatus) :
                new ObjectParameter("LowPowerStatus", typeof(bool));
    
            var dataLoggerStatusParameter = dataLoggerStatus.HasValue ?
                new ObjectParameter("DataLoggerStatus", dataLoggerStatus) :
                new ObjectParameter("DataLoggerStatus", typeof(bool));
    
            var stillStatusParameter = stillStatus.HasValue ?
                new ObjectParameter("StillStatus", stillStatus) :
                new ObjectParameter("StillStatus", typeof(bool));
    
            var enableAlarmsStatusParameter = enableAlarmsStatus.HasValue ?
                new ObjectParameter("EnableAlarmsStatus", enableAlarmsStatus) :
                new ObjectParameter("EnableAlarmsStatus", typeof(bool));
    
            var buzzerStatusParameter = buzzerStatus.HasValue ?
                new ObjectParameter("BuzzerStatus", buzzerStatus) :
                new ObjectParameter("BuzzerStatus", typeof(bool));
    
            var vibratorStatusParameter = vibratorStatus.HasValue ?
                new ObjectParameter("VibratorStatus", vibratorStatus) :
                new ObjectParameter("VibratorStatus", typeof(bool));
    
            var rFConnectionStatusParameter = rFConnectionStatus.HasValue ?
                new ObjectParameter("RFConnectionStatus", rFConnectionStatus) :
                new ObjectParameter("RFConnectionStatus", typeof(bool));
    
            var rFGsensorStatusParameter = rFGsensorStatus.HasValue ?
                new ObjectParameter("RFGsensorStatus", rFGsensorStatus) :
                new ObjectParameter("RFGsensorStatus", typeof(bool));
    
            var rFPlugStatusParameter = rFPlugStatus.HasValue ?
                new ObjectParameter("RFPlugStatus", rFPlugStatus) :
                new ObjectParameter("RFPlugStatus", typeof(bool));
    
            var restrictedAreasStatusParameter = restrictedAreasStatus.HasValue ?
                new ObjectParameter("RestrictedAreasStatus", restrictedAreasStatus) :
                new ObjectParameter("RestrictedAreasStatus", typeof(bool));
    
            var restrictedPersonsStatusParameter = restrictedPersonsStatus.HasValue ?
                new ObjectParameter("RestrictedPersonsStatus", restrictedPersonsStatus) :
                new ObjectParameter("RestrictedPersonsStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLocations_Result>("spLocations", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, personIdParameter, deviceIdParameter, connectingSessionParameter, serialNumberParameter, deviceDateParameter, serverDateParameter, latitudeParameter, longitudeParameter, speedParameter, courseParameter, moveDistanceParameter, gPSstatusParameter, satellitesNumberParameter, gPSFixedStatusParameter, hDOPParameter, mCCParameter, lACParameter, cellIDParameter, alarmStatusParameter, batteryVoltageParameter, batteryPercentageParameter, gSMSignalParameter, beltStatusParameter, shellStatusParameter, chargeStatusParameter, lowPowerStatusParameter, dataLoggerStatusParameter, stillStatusParameter, enableAlarmsStatusParameter, buzzerStatusParameter, vibratorStatusParameter, rFConnectionStatusParameter, rFGsensorStatusParameter, rFPlugStatusParameter, restrictedAreasStatusParameter, restrictedPersonsStatusParameter);
        }
    
        public virtual ObjectResult<spLogs_Result> spLogs(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> userId, Nullable<int> recordTypeId, Nullable<long> recordId, string resource, Nullable<int> logTypeId, string action, string description, Nullable<System.DateTime> created)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var recordTypeIdParameter = recordTypeId.HasValue ?
                new ObjectParameter("RecordTypeId", recordTypeId) :
                new ObjectParameter("RecordTypeId", typeof(int));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(long));
    
            var resourceParameter = resource != null ?
                new ObjectParameter("Resource", resource) :
                new ObjectParameter("Resource", typeof(string));
    
            var logTypeIdParameter = logTypeId.HasValue ?
                new ObjectParameter("LogTypeId", logTypeId) :
                new ObjectParameter("LogTypeId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLogs_Result>("spLogs", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, userIdParameter, recordTypeIdParameter, recordIdParameter, resourceParameter, logTypeIdParameter, actionParameter, descriptionParameter, createdParameter);
        }
    
        public virtual ObjectResult<spNotificationTypes_Result> spNotificationTypes(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, Nullable<int> id, string name, string content)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNotificationTypes_Result>("spNotificationTypes", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, idParameter, nameParameter, contentParameter);
        }
    
        public virtual ObjectResult<spParameters_Result> spParameters(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, Nullable<int> id, string name, string value)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spParameters_Result>("spParameters", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, idParameter, nameParameter, valueParameter);
        }
    
        public virtual ObjectResult<spPersons_Result> spPersons(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<int> customerId, Nullable<int> centerId, Nullable<int> countryId, Nullable<int> languageId, Nullable<int> personTypeId, Nullable<long> deviceId, Nullable<long> ownerUserId, string firstName, string lastName, Nullable<byte> genreId, Nullable<System.DateTime> birthdate, string documentId, string height, string weight, string eyesColor, string hairColor, Nullable<byte> ethnyId, string address, string phone, string familyPhones, string postalCode, string scarsMarksTattoos, Nullable<byte> crimeId, string nicknames, Nullable<byte> riskId, Nullable<int> timeZone, Nullable<bool> autoDST, string picture, Nullable<long> locationId, Nullable<long> connectionId, Nullable<bool> hasHouseArrest, string comments, Nullable<bool> active, Nullable<bool> viewOnMap, Nullable<bool> online, string accessCode, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var personTypeIdParameter = personTypeId.HasValue ?
                new ObjectParameter("PersonTypeId", personTypeId) :
                new ObjectParameter("PersonTypeId", typeof(int));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(long));
    
            var ownerUserIdParameter = ownerUserId.HasValue ?
                new ObjectParameter("OwnerUserId", ownerUserId) :
                new ObjectParameter("OwnerUserId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genreIdParameter = genreId.HasValue ?
                new ObjectParameter("GenreId", genreId) :
                new ObjectParameter("GenreId", typeof(byte));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var documentIdParameter = documentId != null ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(string));
    
            var heightParameter = height != null ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(string));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var eyesColorParameter = eyesColor != null ?
                new ObjectParameter("EyesColor", eyesColor) :
                new ObjectParameter("EyesColor", typeof(string));
    
            var hairColorParameter = hairColor != null ?
                new ObjectParameter("HairColor", hairColor) :
                new ObjectParameter("HairColor", typeof(string));
    
            var ethnyIdParameter = ethnyId.HasValue ?
                new ObjectParameter("EthnyId", ethnyId) :
                new ObjectParameter("EthnyId", typeof(byte));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var familyPhonesParameter = familyPhones != null ?
                new ObjectParameter("FamilyPhones", familyPhones) :
                new ObjectParameter("FamilyPhones", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var scarsMarksTattoosParameter = scarsMarksTattoos != null ?
                new ObjectParameter("ScarsMarksTattoos", scarsMarksTattoos) :
                new ObjectParameter("ScarsMarksTattoos", typeof(string));
    
            var crimeIdParameter = crimeId.HasValue ?
                new ObjectParameter("CrimeId", crimeId) :
                new ObjectParameter("CrimeId", typeof(byte));
    
            var nicknamesParameter = nicknames != null ?
                new ObjectParameter("Nicknames", nicknames) :
                new ObjectParameter("Nicknames", typeof(string));
    
            var riskIdParameter = riskId.HasValue ?
                new ObjectParameter("RiskId", riskId) :
                new ObjectParameter("RiskId", typeof(byte));
    
            var timeZoneParameter = timeZone.HasValue ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(int));
    
            var autoDSTParameter = autoDST.HasValue ?
                new ObjectParameter("AutoDST", autoDST) :
                new ObjectParameter("AutoDST", typeof(bool));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var connectionIdParameter = connectionId.HasValue ?
                new ObjectParameter("ConnectionId", connectionId) :
                new ObjectParameter("ConnectionId", typeof(long));
    
            var hasHouseArrestParameter = hasHouseArrest.HasValue ?
                new ObjectParameter("HasHouseArrest", hasHouseArrest) :
                new ObjectParameter("HasHouseArrest", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var viewOnMapParameter = viewOnMap.HasValue ?
                new ObjectParameter("ViewOnMap", viewOnMap) :
                new ObjectParameter("ViewOnMap", typeof(bool));
    
            var onlineParameter = online.HasValue ?
                new ObjectParameter("Online", online) :
                new ObjectParameter("Online", typeof(bool));
    
            var accessCodeParameter = accessCode != null ?
                new ObjectParameter("AccessCode", accessCode) :
                new ObjectParameter("AccessCode", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPersons_Result>("spPersons", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, customerIdParameter, centerIdParameter, countryIdParameter, languageIdParameter, personTypeIdParameter, deviceIdParameter, ownerUserIdParameter, firstNameParameter, lastNameParameter, genreIdParameter, birthdateParameter, documentIdParameter, heightParameter, weightParameter, eyesColorParameter, hairColorParameter, ethnyIdParameter, addressParameter, phoneParameter, familyPhonesParameter, postalCodeParameter, scarsMarksTattoosParameter, crimeIdParameter, nicknamesParameter, riskIdParameter, timeZoneParameter, autoDSTParameter, pictureParameter, locationIdParameter, connectionIdParameter, hasHouseArrestParameter, commentsParameter, activeParameter, viewOnMapParameter, onlineParameter, accessCodeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spPersonsByGroup_Result> spPersonsByGroup(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> personId, Nullable<long> groupId, Nullable<System.DateTime> created)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPersonsByGroup_Result>("spPersonsByGroup", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, personIdParameter, groupIdParameter, createdParameter);
        }
    
        public virtual ObjectResult<spPointsByRestrictedArea_Result> spPointsByRestrictedArea(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> restrictedAreaId, Nullable<decimal> latitude, Nullable<decimal> longitude)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var restrictedAreaIdParameter = restrictedAreaId.HasValue ?
                new ObjectParameter("RestrictedAreaId", restrictedAreaId) :
                new ObjectParameter("RestrictedAreaId", typeof(long));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPointsByRestrictedArea_Result>("spPointsByRestrictedArea", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, restrictedAreaIdParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<spRecordTypes_Result> spRecordTypes(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, Nullable<int> id, string name)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRecordTypes_Result>("spRecordTypes", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, idParameter, nameParameter);
        }
    
        public virtual ObjectResult<spResponsesByTicket_Result> spResponsesByTicket(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> ticketId, Nullable<long> userId, Nullable<byte> ticketStateId, string message, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var ticketStateIdParameter = ticketStateId.HasValue ?
                new ObjectParameter("TicketStateId", ticketStateId) :
                new ObjectParameter("TicketStateId", typeof(byte));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spResponsesByTicket_Result>("spResponsesByTicket", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, ticketIdParameter, userIdParameter, ticketStateIdParameter, messageParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spRestrictedAreas_Result> spRestrictedAreas(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> restrictedAreaId, Nullable<int> centerId, Nullable<long> personId, string name, string color, Nullable<byte> restrictionTypeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> finishDate, string repeatRules, Nullable<bool> onAlert, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var restrictedAreaIdParameter = restrictedAreaId.HasValue ?
                new ObjectParameter("RestrictedAreaId", restrictedAreaId) :
                new ObjectParameter("RestrictedAreaId", typeof(long));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var restrictionTypeIdParameter = restrictionTypeId.HasValue ?
                new ObjectParameter("RestrictionTypeId", restrictionTypeId) :
                new ObjectParameter("RestrictionTypeId", typeof(byte));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("FinishDate", finishDate) :
                new ObjectParameter("FinishDate", typeof(System.DateTime));
    
            var repeatRulesParameter = repeatRules != null ?
                new ObjectParameter("RepeatRules", repeatRules) :
                new ObjectParameter("RepeatRules", typeof(string));
    
            var onAlertParameter = onAlert.HasValue ?
                new ObjectParameter("OnAlert", onAlert) :
                new ObjectParameter("OnAlert", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRestrictedAreas_Result>("spRestrictedAreas", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, restrictedAreaIdParameter, centerIdParameter, personIdParameter, nameParameter, colorParameter, restrictionTypeIdParameter, startDateParameter, finishDateParameter, repeatRulesParameter, onAlertParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spRestrictedPersons_Result> spRestrictedPersons(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> originPersonId, Nullable<long> destinationPersonId, string name, Nullable<byte> restrictionTypeId, Nullable<byte> unitTypeId, Nullable<decimal> distance, Nullable<bool> notifyDestinatary, Nullable<bool> onAlert, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var originPersonIdParameter = originPersonId.HasValue ?
                new ObjectParameter("OriginPersonId", originPersonId) :
                new ObjectParameter("OriginPersonId", typeof(long));
    
            var destinationPersonIdParameter = destinationPersonId.HasValue ?
                new ObjectParameter("DestinationPersonId", destinationPersonId) :
                new ObjectParameter("DestinationPersonId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var restrictionTypeIdParameter = restrictionTypeId.HasValue ?
                new ObjectParameter("RestrictionTypeId", restrictionTypeId) :
                new ObjectParameter("RestrictionTypeId", typeof(byte));
    
            var unitTypeIdParameter = unitTypeId.HasValue ?
                new ObjectParameter("UnitTypeId", unitTypeId) :
                new ObjectParameter("UnitTypeId", typeof(byte));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(decimal));
    
            var notifyDestinataryParameter = notifyDestinatary.HasValue ?
                new ObjectParameter("NotifyDestinatary", notifyDestinatary) :
                new ObjectParameter("NotifyDestinatary", typeof(bool));
    
            var onAlertParameter = onAlert.HasValue ?
                new ObjectParameter("OnAlert", onAlert) :
                new ObjectParameter("OnAlert", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRestrictedPersons_Result>("spRestrictedPersons", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, originPersonIdParameter, destinationPersonIdParameter, nameParameter, restrictionTypeIdParameter, unitTypeIdParameter, distanceParameter, notifyDestinataryParameter, onAlertParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spSessions_Result> spSessions(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> userId, Nullable<long> tokenId, string browser, Nullable<System.DateTime> started, string platform, string agent, string hostAddress, string location, string locationName)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var tokenIdParameter = tokenId.HasValue ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(long));
    
            var browserParameter = browser != null ?
                new ObjectParameter("Browser", browser) :
                new ObjectParameter("Browser", typeof(string));
    
            var startedParameter = started.HasValue ?
                new ObjectParameter("Started", started) :
                new ObjectParameter("Started", typeof(System.DateTime));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var agentParameter = agent != null ?
                new ObjectParameter("Agent", agent) :
                new ObjectParameter("Agent", typeof(string));
    
            var hostAddressParameter = hostAddress != null ?
                new ObjectParameter("HostAddress", hostAddress) :
                new ObjectParameter("HostAddress", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSessions_Result>("spSessions", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, userIdParameter, tokenIdParameter, browserParameter, startedParameter, platformParameter, agentParameter, hostAddressParameter, locationParameter, locationNameParameter);
        }
    
        public virtual ObjectResult<spSessionUses_Result> spSessionUses(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> sessionId, Nullable<System.DateTime> started, string hostAddress, string location, string locationName, string additionalInfo)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(long));
    
            var startedParameter = started.HasValue ?
                new ObjectParameter("Started", started) :
                new ObjectParameter("Started", typeof(System.DateTime));
    
            var hostAddressParameter = hostAddress != null ?
                new ObjectParameter("HostAddress", hostAddress) :
                new ObjectParameter("HostAddress", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var additionalInfoParameter = additionalInfo != null ?
                new ObjectParameter("AdditionalInfo", additionalInfo) :
                new ObjectParameter("AdditionalInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSessionUses_Result>("spSessionUses", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, sessionIdParameter, startedParameter, hostAddressParameter, locationParameter, locationNameParameter, additionalInfoParameter);
        }
    
        public virtual ObjectResult<spSimCards_Result> spSimCards(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<int> centerId, Nullable<long> deviceId, Nullable<int> carrierByCountryId, Nullable<int> simCardTypeId, string phone, string serial, Nullable<bool> active, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(long));
    
            var carrierByCountryIdParameter = carrierByCountryId.HasValue ?
                new ObjectParameter("CarrierByCountryId", carrierByCountryId) :
                new ObjectParameter("CarrierByCountryId", typeof(int));
    
            var simCardTypeIdParameter = simCardTypeId.HasValue ?
                new ObjectParameter("SimCardTypeId", simCardTypeId) :
                new ObjectParameter("SimCardTypeId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSimCards_Result>("spSimCards", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, centerIdParameter, deviceIdParameter, carrierByCountryIdParameter, simCardTypeIdParameter, phoneParameter, serialParameter, activeParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spSimCardUses_Result> spSimCardUses(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> deviceId, Nullable<long> simCardId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(long));
    
            var simCardIdParameter = simCardId.HasValue ?
                new ObjectParameter("SimCardId", simCardId) :
                new ObjectParameter("SimCardId", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSimCardUses_Result>("spSimCardUses", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, deviceIdParameter, simCardIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spTickets_Result> spTickets(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> userId, Nullable<int> centerId, Nullable<long> personId, Nullable<long> locationId, Nullable<byte> ticketStateId, string message, Nullable<bool> withAlerts, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var ticketStateIdParameter = ticketStateId.HasValue ?
                new ObjectParameter("TicketStateId", ticketStateId) :
                new ObjectParameter("TicketStateId", typeof(byte));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var withAlertsParameter = withAlerts.HasValue ?
                new ObjectParameter("WithAlerts", withAlerts) :
                new ObjectParameter("WithAlerts", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTickets_Result>("spTickets", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, userIdParameter, centerIdParameter, personIdParameter, locationIdParameter, ticketStateIdParameter, messageParameter, withAlertsParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spTicketStates_Result> spTicketStates(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, Nullable<byte> id, string name)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTicketStates_Result>("spTicketStates", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, idParameter, nameParameter);
        }
    
        public virtual ObjectResult<spTokens_Result> spTokens(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> userId, Nullable<long> sessionId, string code, Nullable<bool> longLife, Nullable<System.DateTime> start, Nullable<System.DateTime> finish, Nullable<System.DateTime> lastUse)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var longLifeParameter = longLife.HasValue ?
                new ObjectParameter("LongLife", longLife) :
                new ObjectParameter("LongLife", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var finishParameter = finish.HasValue ?
                new ObjectParameter("Finish", finish) :
                new ObjectParameter("Finish", typeof(System.DateTime));
    
            var lastUseParameter = lastUse.HasValue ?
                new ObjectParameter("LastUse", lastUse) :
                new ObjectParameter("LastUse", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTokens_Result>("spTokens", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, userIdParameter, sessionIdParameter, codeParameter, longLifeParameter, startParameter, finishParameter, lastUseParameter);
        }
    
        public virtual ObjectResult<spUsers_Result> spUsers(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<int> customerId, Nullable<int> centerId, Nullable<int> countryId, Nullable<int> languageId, Nullable<int> userTypeId, Nullable<long> ownerUserId, string firstName, string lastName, string email, string password, string city, string address, string phone, Nullable<byte> genreId, Nullable<int> timeZone, Nullable<bool> autoDST, string picture, Nullable<bool> active, Nullable<bool> online, Nullable<System.DateTime> created, Nullable<System.DateTime> updated)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var ownerUserIdParameter = ownerUserId.HasValue ?
                new ObjectParameter("OwnerUserId", ownerUserId) :
                new ObjectParameter("OwnerUserId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var genreIdParameter = genreId.HasValue ?
                new ObjectParameter("GenreId", genreId) :
                new ObjectParameter("GenreId", typeof(byte));
    
            var timeZoneParameter = timeZone.HasValue ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(int));
    
            var autoDSTParameter = autoDST.HasValue ?
                new ObjectParameter("AutoDST", autoDST) :
                new ObjectParameter("AutoDST", typeof(bool));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var onlineParameter = online.HasValue ?
                new ObjectParameter("Online", online) :
                new ObjectParameter("Online", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUsers_Result>("spUsers", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, customerIdParameter, centerIdParameter, countryIdParameter, languageIdParameter, userTypeIdParameter, ownerUserIdParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, cityParameter, addressParameter, phoneParameter, genreIdParameter, timeZoneParameter, autoDSTParameter, pictureParameter, activeParameter, onlineParameter, createdParameter, updatedParameter);
        }
    
        public virtual ObjectResult<spUsersByGroup_Result> spUsersByGroup(string operation, Nullable<int> skipRows, Nullable<int> takeRows, string orderBy, string where, ObjectParameter totalRows, ObjectParameter id, Nullable<long> userId, Nullable<long> groupId, Nullable<bool> watching, Nullable<System.DateTime> created)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(long));
    
            var watchingParameter = watching.HasValue ?
                new ObjectParameter("Watching", watching) :
                new ObjectParameter("Watching", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUsersByGroup_Result>("spUsersByGroup", operationParameter, skipRowsParameter, takeRowsParameter, orderByParameter, whereParameter, totalRows, id, userIdParameter, groupIdParameter, watchingParameter, createdParameter);
        }
    }
}
